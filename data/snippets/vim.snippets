snippet base#buf#open_split
	base#buf#open_split({ "lines" : <++>, "text" : <++>, "cmds_pre" : <++>})
snippet base#listnewinc
	let list = base#listnewinc(<+start+>,<+end+>,<+inc+>)
snippet prf
	let prf = { 'plugin' : '<++>', 'func' : '<++>', 'prf' : '<++>' }
snippet base#file#write_lines
	call base#file#write_lines({ 
		\	'lines' : lines, 
		\	'file'  : file, 
		\	'mode'  : 'rewrite',
		\})
snippet ret
	return
snippet pymy#data#tabulate
	let lines = pymy#data#tabulate({
		\ 'data'    : <++>,
		\ 'headers' : <++>,
		\ })
snippet db
	base#dbfile()
snippet base#inlist
	base#inlist(<+element+>,<+list+>)
snippet perlusebaseurl
	use Base::URL qw(
		uri_decompose
		
		url_parent
		url_level
		url_normalize 
	);
snippet asyncrun
	let env = {}
	function env.get(temp_file) dict
			let h = ''
			if self.return_code == 0
				" use tiny split window height on success
				let h = 1
			endif
			" open the file in a split
			exec h . "split " . a:temp_file
			
			if filereadable(a:temp_file)
				let out = readfile(a:temp_file)
			endif
			call base#varset('idephp_dws_last_output',out)
			" remove boring build output
			"%s/^\[xslt\].*$/
			" go back to the previous window
			wincmd p
	endfunction
	
	" tab_restore prevents interruption when the task completes.
	" All provided asynchandlers already use tab_restore.
	call asynccommand#run(pl_cmd, asynccommand#tab_restore(env))
