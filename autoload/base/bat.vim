
function! base#bat#cmd_for_exe (...)
	let ref      = get(a:000, 0, {})

	let bat_file = get(ref, 'bat_file' ,'')

	if !strlen(bat_file)
		return
	endif

	let blines   = base#bat#lines(ref)

	let r_f = {
		\	'lines' : blines,
		\	'file'  : bat_file,
		\	}

	call base#file#write_lines(r_f)

	if !filereadable(bat_file)
		let msg = [ 'bat_file NOT exist' , bat_file ]
		let w = { 'text' : msg, 'plugin' : 'base', 'func' : 'base#bat#cmd_for_exe' }
		call base#warn(w)
		return ''
	endif

	let cmd = shellescape( bat_file )
	return cmd

endf

function! base#bat#exe (...)
	let ref = get(a:000,0,{})

	let cmd = base#bat#cmd_for_exe(ref)

	if !strlen(cmd)
		let msg = [ 'no cmd provided!' ]
		let w = { 'text' : msg, 'plugin' : 'base', 'func' : 'base#bat#exe' }
		call base#warn(w)
		return 
	endif

	let ok = base#sys({ 
		\	"cmds"         : [cmd],
		\	"split_output" : 0,
		\	})
	let out    = base#varget('sysout',[])
	
	let res = {
		\		'out'    : out,
		\		'ok'     : ok,
		\		'cmd'    : cmd,
		\	}

	return res

endf

function! base#bat#lines (...)
	let ref      = get(a:000, 0, {})

	let exe = get(ref,'exe','')

	let args = get(ref,'args',[])
	let opts = get(ref,'opts',[])

	let bat_lines = [
		\			' ',
		\			'@echo off ',
		\			' ',
		\			'REM generated by vim: base#bat#lines()' ,
		\			' ',
		\			'set opts=',
		\			'set args=',
		\			' ',
		\		]

	let i = 0
	while i < len(opts)
		let opts[i+1] = shellescape( opts[i+1] )

		let o = join([ opts[i], opts[i+1] ]," ")
		call add(bat_lines,'set opts=%opts% ' . o )

		let i += 2
	endw
	call add(bat_lines,' ')

	for arg in args
		call add(bat_lines,'set args=%args% ' . shellescape(arg) )
	endfor
	call add(bat_lines,' ')
	call add(bat_lines,'set exe=' . exe )
	call add(bat_lines,' ')
	call add(bat_lines,'cmd /c %exe% %opts% %args% %* ')
	call add(bat_lines,' ')

	return bat_lines

endf
